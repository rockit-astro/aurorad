#!/usr/bin/env python3
#
# This file is part of aurorad.
#
# aurorad is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aurorad is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aurorad.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from aurorad"""

import datetime
import json
import os
import sys
import Pyro4
from warwick.observatory.common import daemons

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'


def run_command(command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the Vaisala daemon')
        ret = 1

    return ret


def print_status():
    """Prints the latest weather data in human-readable form"""
    latest = None
    try:
        with daemons.superwasp_aurora.connect() as aurora:
            latest = aurora.last_measurement()
            sensors = aurora.measurement_sensors()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with Aurora daemon')
        return 1

    if latest is not None and sensors is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received \033[1m{}\033[0m:'.format(date))

        # Find the longest label to set the parameter indent
        max_label_length = 0
        for s in sensors.values():
            max_label_length = max(max_label_length, len(s['label']))

        for key, s in sensors.items():
            label_padding = max_label_length - len(s['label'])
            line = ' ' * label_padding + s['label'] + ': '
            line += FMT_BOLD + str(latest[key])
            if 'units' in s:
                line += ' ' + s['units']
            line += FMT_CLEAR
            print(line)
        print()
    else:
        print('error: failed to query data')
        return 1

    return 0


def print_json():
    """Prints the latest environment data in machine-readable form"""
    with daemons.superwasp_aurora.connect() as aurora:
        latest = aurora.last_measurement()
    print(json.dumps(latest or {}))
    return 0


def print_usage():
    """Prints the utility help"""
    print('Usage: {} <command>'.format(SCRIPT_NAME))
    print()
    print('   status      print a human-readable summary of the Aurora status')
    print('   json        print a machine-readable summary of the Aurora status')
    print()
    return 1


if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.exit(print_usage())

    commands = {
        'status': print_status,
        'json': print_json,
    }

    if sys.argv[1] not in commands:
        sys.exit(print_usage())

    sys.exit(run_command(commands[sys.argv[1]]))
